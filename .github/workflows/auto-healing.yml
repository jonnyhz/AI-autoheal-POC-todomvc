name: AI Auto-Healing Pipeline

on:
  workflow_run:
    workflows: ["Cypress E2E Tests with Auto-Healing"]
    types: [completed]
    branches: [master, main]

jobs:
  auto-healing:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'failure' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: master
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Download Cypress screenshots (if available)
      uses: actions/download-artifact@v4
      with:
        name: cypress-screenshots
        path: cypress/screenshots
        github-token: ${{ secrets.GITHUB_TOKEN }}
        repository: ${{ github.repository }}
        run-id: ${{ github.event.workflow_run.id }}
        
    - name: Download DOM content (if available)
      uses: actions/download-artifact@v4
      with:
        name: cypress-dom-content
        path: cypress/failures
        github-token: ${{ secrets.GITHUB_TOKEN }}
        repository: ${{ github.repository }}
        run-id: ${{ github.event.workflow_run.id }}
        
    - name: Analyze test failures
      run: |
        echo "🔍 Analyzing test failures for auto-healing..."
        echo "Test failure detected in workflow: ${{ github.event.workflow_run.name }}"
        echo "Workflow run ID: ${{ github.event.workflow_run.id }}"
        echo "Failure URL: ${{ github.event.workflow_run.html_url }}"
        
        # Check if artifacts were downloaded
        if [ -d "cypress/screenshots" ] && [ "$(ls -A cypress/screenshots 2>/dev/null)" ]; then
          echo "✅ Screenshots found and downloaded"
          echo "📸 Available screenshots:"
          ls -la cypress/screenshots/
        else
          echo "⚠️ No screenshots available for analysis"
        fi
        
        # Check if DOM content was downloaded
        if [ -d "cypress/failures" ] && [ "$(ls -A cypress/failures 2>/dev/null)" ]; then
          echo "✅ DOM content found and downloaded"
          echo "🌐 Available DOM files:"
          ls -la cypress/failures/
          echo "📋 Raw files: $(find cypress/failures -name '*.html' ! -name '*-clean.html' | wc -l)"
          echo "🧹 Cleaned files: $(find cypress/failures -name '*-clean.html' | wc -l)"
        else
          echo "⚠️ No DOM content available for analysis"
        fi
        
        # Note: Videos are disabled in cypress.json (video: false)
        echo "ℹ️ Videos are disabled in Cypress configuration"
        
    - name: Build AI Payload
      run: |
        echo "🔧 Building AI payload for test failure analysis..."
        
        # Find the cleaned DOM file
        DOM_FILE=$(ls cypress/failures/*-clean.html | head -1)
        if [ ! -f "$DOM_FILE" ]; then
          echo "❌ No cleaned DOM file found"
          exit 1
        fi
        
        # Build payload using the dedicated module
        node scripts/ai-payload-builder.js "$DOM_FILE"
        
        # Display full payload
        echo "::group::📤 OpenAI Request Payload"
        cat openai_payload.json
        echo "::endgroup::"
        
        # Extract test name from DOM file
        TEST_NAME=$(basename "$DOM_FILE" -clean.html 2>/dev/null || echo "Unknown test")
        
        echo "::group::🧪 Test Name"
        echo "$TEST_NAME"
        echo "::endgroup::"
        
        # Show error message if available
        ERROR_LOG_FILE="${DOM_FILE%-clean.html}.log.txt"
        if [ -f "$ERROR_LOG_FILE" ]; then
          echo "::group::❌ Error Message"
          cat "$ERROR_LOG_FILE"
          echo "::endgroup::"
        else
          echo "::group::❌ Error Message"
          echo "Error log not available"
          echo "::endgroup::"
        fi
        
        echo "::group::🧹 Test HTML Context (Clean)"
        cat "$DOM_FILE"
        echo "::endgroup::"
        
        echo "::group::📄 Full Test File"
        cat tests/e2e/new-todo.spec.js
        echo "::endgroup::"
        
        echo "✅ OpenAI API payload prepared"
        
        # Send to OpenAI API
        if [ -n "${{ secrets.OPENAI_API_KEY }}" ]; then
          echo "🔄 Sending request to OpenAI API..."
          OPENAI_RESPONSE=$(curl -s -X POST https://api.openai.com/v1/chat/completions \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{ secrets.OPENAI_API_KEY }}" \
            -d @openai_payload.json)
          echo "✅ OpenAI API response received"
          echo "$OPENAI_RESPONSE" > openai_response.json
          
          if echo "$OPENAI_RESPONSE" | jq -e '.choices[0].message.content' > /dev/null 2>&1; then
            OPENAI_ANALYSIS=$(echo "$OPENAI_RESPONSE" | jq -r '.choices[0].message.content')
            
            echo "::group::📊 OpenAI Full Response"
            echo "$OPENAI_RESPONSE" | jq '.'
            echo "::endgroup::"
            
            echo "::group::🤖 OpenAI Analysis Response"
            echo "$OPENAI_ANALYSIS"
            echo "::endgroup::"
            
            echo "$OPENAI_ANALYSIS" > openai_analysis.txt
            echo "✅ OpenAI analysis saved for fix application"
          else
            echo "::group::❌ OpenAI Response Error"
            echo "$OPENAI_RESPONSE" | jq '.' || echo "$OPENAI_RESPONSE"
            echo "::endgroup::"
          fi
        else
          echo "⚠️ OPENAI_API_KEY not found in secrets"
        fi
        
        echo "📊 Context summary:"
        echo "- Test file: $(cat tests/e2e/new-todo.spec.js | wc -l) lines"
        echo "- DOM content: $(cat "$DOM_FILE" | wc -c) characters"
        echo "- Has screenshots: $([ -d "cypress/screenshots" ] && [ "$(ls -A cypress/screenshots 2>/dev/null)" ] && echo "Yes" || echo "No")"
        echo "- Has DOM content: $([ -d "cypress/failures" ] && [ "$(ls -A cypress/failures 2>/dev/null)" ] && echo "Yes" || echo "No")"
        
    - name: Parse AI Fix Response
      run: |
        echo "🔍 Parsing AI fix response..."
        
        if [ -f "openai_analysis.txt" ]; then
          echo "📄 OpenAI analysis found, parsing structured fix..."
          
          # Parse and validate the AI response
          node scripts/fix-parser.js openai_analysis.txt
          
          if [ $? -eq 0 ]; then
            echo "✅ AI fix response parsed and validated"
            echo "📊 Fix details saved for application"
          else
            echo "❌ Failed to parse AI response"
            echo "📝 Saving raw response for manual review"
            cp openai_analysis.txt recommended_fix.txt
          fi
          
        else
          echo "⚠️ No OpenAI analysis found"
          echo "📝 Creating placeholder for manual review"
          echo "No AI analysis available" > recommended_fix.txt
        fi
        
        echo "✅ AI fix parsing completed"
        
    - name: Apply AI Fixes
      run: |
        echo "🔧 Applying AI-generated fixes..."
        
        if [ -f "openai_analysis.txt" ]; then
          echo "📄 OpenAI analysis found, attempting to apply fixes..."
          
          # Try to apply the fix
          node scripts/code-fixer.js openai_analysis.txt
          
          if [ $? -eq 0 ]; then
            echo "✅ AI fix applied successfully"
            echo "📊 Fix summary saved to fix-summary.json"
          else
            echo "❌ Failed to apply AI fix"
            echo "📝 Fix will be documented for manual review"
          fi
          
        else
          echo "⚠️ No OpenAI analysis found"
          echo "📝 No fixes to apply"
        fi
        
        echo "✅ Fix application completed"
        
    - name: Create auto-healing branch
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        BRANCH_NAME="auto-healing/fix-${{ github.run_number }}-${{ github.sha }}"
        git checkout -b $BRANCH_NAME
        echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV
        
    - name: Document Fix Results
      run: |
        echo "📝 Documenting fix results..."
        
        if [ -f "fix-summary.json" ]; then
          echo "✅ AI fix was applied successfully"
          echo "📊 Fix details:"
          cat fix-summary.json | jq '.fix'
          
          # Create a summary for the PR
          cat > fix_summary.txt << EOF
        🤖 AI Auto-Healing Fix Applied
        
        📄 File: $(cat fix-summary.json | jq -r '.fix.file')
        📍 Location: Line $(cat fix-summary.json | jq -r '.fix.line'), Column $(cat fix-summary.json | jq -r '.fix.column')
        🔍 Old Code: $(cat fix-summary.json | jq -r '.fix.oldCode')
        ✨ New Code: $(cat fix-summary.json | jq -r '.fix.newCode')
        📝 Reason: $(cat fix-summary.json | jq -r '.fix.reason')
        
        💾 Backup created: $(cat fix-summary.json | jq -r '.backup')
        ⏰ Applied: $(cat fix-summary.json | jq -r '.timestamp')
        EOF
          
        elif [ -f "openai_analysis.txt" ]; then
          echo "⚠️ AI analysis available but fix could not be applied"
          echo "📝 Creating manual review summary"
          
          cat > fix_summary.txt << EOF
        🤖 AI Analysis Available
        
        The AI provided analysis but the fix could not be automatically applied.
        Please review the analysis and apply fixes manually.
        
        📄 Analysis saved in: openai_analysis.txt
        📊 Full response available in workflow logs
        EOF
          
        else
          echo "❌ No AI analysis or fix data available"
          
          cat > fix_summary.txt << EOF
        ❌ No Auto-Healing Data Available
        
        No AI analysis or fix data was generated.
        Please review the test failure manually.
        EOF
        fi
        
        echo "✅ Fix documentation completed"
        
    - name: Push auto-healing branch
      run: |
        # Get the branch name that was created
        BRANCH_NAME=$(git branch --show-current)
        git push origin $BRANCH_NAME
        
    - name: Create Pull Request
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        title: "🤖 Auto-healing: Fix test failures"
        body: |
          ## 🤖 AI Auto-Healing Fix
          
          This PR contains automated fixes for failing tests detected by the auto-healing pipeline.
          
          **🔧 Fix Details:**
          $(cat fix_summary.txt)
          
          **📊 Test Results:**
          - Original failure: ${{ github.event.workflow_run.html_url }}
          - Auto-healing run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          
          **✅ Next Steps:**
          1. Review the applied changes
          2. Run tests locally to verify the fix
          3. Merge if tests pass
          4. The original file is backed up with `.backup` extension
        branch: ${{ env.BRANCH_NAME }}
        base: master
        delete-branch: true
        
    - name: Trigger Cypress E2E Tests
      if: success()
      run: |
        echo "🧪 Triggering Cypress E2E tests to verify the fix..."
        
        # Get the current branch name
        BRANCH_NAME=$(git branch --show-current)
        
        # Use curl to trigger the workflow via GitHub API with apply_fix_retry=true
        curl -X POST \
          -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          -H "Accept: application/vnd.github.v3+json" \
          https://api.github.com/repos/${{ github.repository }}/actions/workflows/cypress-e2e.yml/dispatches \
          -d '{
            "ref": "'$BRANCH_NAME'",
            "inputs": {
              "triggered_by": "auto-healing-pipeline",
              "apply_fix_retry": "true"
            }
          }'
        
        echo "✅ Cypress E2E tests triggered successfully"
        echo "📊 Monitor the test results at: ${{ github.server_url }}/${{ github.repository }}/actions" 
