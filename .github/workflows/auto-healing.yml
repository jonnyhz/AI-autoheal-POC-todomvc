name: AI Auto-Healing Pipeline

on:
  workflow_run:
    workflows: ["Cypress E2E Tests with Auto-Healing"]
    types: [completed]
    branches: [master, main]

jobs:
  auto-healing:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'failure' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: master
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Download Cypress screenshots (if available)
      uses: actions/download-artifact@v4
      with:
        name: cypress-screenshots
        path: cypress/screenshots
        github-token: ${{ secrets.GITHUB_TOKEN }}
        repository: ${{ github.repository }}
        run-id: ${{ github.event.workflow_run.id }}
        
    - name: Download DOM content (if available)
      uses: actions/download-artifact@v4
      with:
        name: cypress-dom-content
        path: cypress/failures
        github-token: ${{ secrets.GITHUB_TOKEN }}
        repository: ${{ github.repository }}
        run-id: ${{ github.event.workflow_run.id }}
        
    - name: Analyze test failures
      run: |
        echo "🔍 Analyzing test failures for auto-healing..."
        echo "Test failure detected in workflow: ${{ github.event.workflow_run.name }}"
        echo "Workflow run ID: ${{ github.event.workflow_run.id }}"
        echo "Failure URL: ${{ github.event.workflow_run.html_url }}"
        
        # Check if artifacts were downloaded
        if [ -d "cypress/screenshots" ] && [ "$(ls -A cypress/screenshots 2>/dev/null)" ]; then
          echo "✅ Screenshots found and downloaded"
          echo "📸 Available screenshots:"
          ls -la cypress/screenshots/
        else
          echo "⚠️ No screenshots available for analysis"
        fi
        
        # Check if DOM content was downloaded
        if [ -d "cypress/failures" ] && [ "$(ls -A cypress/failures 2>/dev/null)" ]; then
          echo "✅ DOM content found and downloaded"
          echo "🌐 Available DOM files:"
          ls -la cypress/failures/
        else
          echo "⚠️ No DOM content available for analysis"
        fi
        
        # Note: Videos are disabled in cypress.json (video: false)
        echo "ℹ️ Videos are disabled in Cypress configuration"
        
    - name: AI Analysis with Claude
      run: |
        echo "🤖 Sending test context to Claude AI for analysis..."
        
        # Prepare test context for Claude
        echo "Preparing test context..."
        
        # Get test file content
        if [ -f "tests/e2e/new-todo.spec.js" ]; then
          echo "📄 Test file found"
          TEST_CONTENT=$(cat tests/e2e/new-todo.spec.js)
        else
          echo "⚠️ Test file not found"
          TEST_CONTENT="Test file not available"
        fi
        
        # Get DOM content if available
        if [ -d "cypress/failures" ] && [ "$(ls -A cypress/failures 2>/dev/null)" ]; then
          DOM_FILE=$(ls cypress/failures/*.html | head -1)
          if [ -f "$DOM_FILE" ]; then
            echo "🌐 DOM content found: $DOM_FILE"
            # Get a snippet of DOM content (first 2000 characters to avoid token limits)
            DOM_CONTENT=$(head -c 2000 "$DOM_FILE")
          else
            DOM_CONTENT="DOM content not available"
          fi
        else
          DOM_CONTENT="DOM content not available"
        fi
        
        # Create context payload
        cat > test_context.json << EOF
        {
          "test_failure": {
            "workflow_name": "${{ github.event.workflow_run.name }}",
            "workflow_id": "${{ github.event.workflow_run.id }}",
            "failure_url": "${{ github.event.workflow_run.html_url }}",
            "repository": "${{ github.repository }}",
            "test_content": $(echo "$TEST_CONTENT" | jq -Rs .),
            "dom_content": $(echo "$DOM_CONTENT" | jq -Rs .),
            "has_screenshots": $([ -d "cypress/screenshots" ] && [ "$(ls -A cypress/screenshots 2>/dev/null)" ] && echo "true" || echo "false"),
            "has_dom_content": $([ -d "cypress/failures" ] && [ "$(ls -A cypress/failures 2>/dev/null)" ] && echo "true" || echo "false")
          }
        }
        EOF
        
        echo "✅ Test context prepared for Claude AI analysis"
        echo "📊 Context summary:"
        echo "- Test content: $(echo "$TEST_CONTENT" | wc -l) lines"
        echo "- DOM content: $(echo "$DOM_CONTENT" | wc -c) characters"
        echo "- Has screenshots: $([ -d "cypress/screenshots" ] && [ "$(ls -A cypress/screenshots 2>/dev/null)" ] && echo "Yes" || echo "No")"
        echo "- Has DOM content: $([ -d "cypress/failures" ] && [ "$(ls -A cypress/failures 2>/dev/null)" ] && echo "Yes" || echo "No")"
        
        # TODO: Send to Claude API
        echo "🔄 Next: Send context to Claude API for failure analysis"
        echo "🔄 Claude will analyze: test expectations vs actual DOM state"
        
    - name: Generate AI-powered fixes
      run: |
        echo "🤖 AI Auto-Healing System Activated"
        echo "Analyzing failure patterns and generating potential fixes..."
        echo "This is where you would integrate with:"
        echo "- OpenAI API for test analysis"
        echo "- Custom AI models for test repair"
        echo "- Testim or Mabl for visual regression fixes"
        echo "- Selenium IDE for selector updates"
        
    - name: Create auto-healing branch
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git checkout -b auto-healing/fix-${{ github.run_number }}-${{ github.sha }}
        
    - name: Apply AI-generated fixes
      run: |
        echo "🔧 Applying AI-generated fixes..."
        echo "This step would:"
        echo "1. Update selectors if elements changed"
        echo "2. Fix timing issues"
        echo "3. Update test expectations"
        echo "4. Add retry mechanisms"
        echo "5. Update test data"
        
    - name: Push auto-healing branch
      run: |
        git push origin auto-healing/fix-${{ github.run_number }}-${{ github.sha }}
        
    - name: Create Pull Request
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        title: "🤖 Auto-healing: Fix test failures"
        body: |
          ## AI Auto-Healing Fix
          
          This PR contains automated fixes for failing tests detected by the auto-healing pipeline.
          
          **Changes made:**
          - [ ] Updated selectors
          - [ ] Fixed timing issues  
          - [ ] Updated test expectations
          - [ ] Added retry mechanisms
          
          **Test Results:**
          - Original failure: ${{ github.event.workflow_run.html_url }}
          - Auto-healing run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          
          **Next Steps:**
          1. Review the changes
          2. Run tests locally
          3. Merge if tests pass
        branch: auto-healing/fix-${{ github.run_number }}-${{ github.sha }}
        base: master
        delete-branch: true 